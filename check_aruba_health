#!/usr/bin/env python3
import argparse
import sys
from pysnmp.hlapi import *

SYS_UPTIME_OID = '1.3.6.1.2.1.1.3.0'
TEMP_OID = '1.3.6.1.2.1.99.1.1.1.4.7001'

IF_DESCR_OID = '1.3.6.1.2.1.2.2.1.2'
IF_OPER_STATUS_OID = '1.3.6.1.2.1.2.2.1.8'
IF_IN_OCTETS_OID = '1.3.6.1.2.1.2.2.1.10'
IF_OUT_OCTETS_OID = '1.3.6.1.2.1.2.2.1.16'

PSU_STATUS_OID = '1.3.6.1.4.1.47196.4.1.1.3.11.2.1.1.4'
FAN_STATUS_OID = '1.3.6.1.4.1.47196.4.1.1.3.11.5.1.1.5'

def convert_bytes(bytes_value):
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    size = float(bytes_value)
    unit_index = 0
    while size >= 1024 and unit_index < len(units) - 1:
        size /= 1024
        unit_index += 1
    return f"{size:.2f} {units[unit_index]}"

def convert_ticks(ticks):
    seconds = int(ticks) // 100
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{days}d {hours}h {minutes}m {seconds}s"

def snmp_get(host, community, oid, port=161, timeout=1, retries=3):
    iterator = getCmd(SnmpEngine(),
                      CommunityData(community, mpModel=0),
                      UdpTransportTarget((host, port), timeout=timeout, retries=retries),
                      ContextData(),
                      ObjectType(ObjectIdentity(oid)))
    errorIndication, errorStatus, errorIndex, varBinds = next(iterator)
    if errorIndication:
        raise Exception(f"SNMP GET error: {errorIndication}")
    elif errorStatus:
        raise Exception(f"SNMP GET error: {errorStatus.prettyPrint()}")
    else:
        return varBinds[0][1]
    return None

def snmp_walk(host, community, oid, port=161, timeout=1, retries=3):
    results = {}
    for (errorIndication, errorStatus, errorIndex, varBinds) in nextCmd(
            SnmpEngine(),
            CommunityData(community, mpModel=0),
            UdpTransportTarget((host, port), timeout=timeout, retries=retries),
            ContextData(),
            ObjectType(ObjectIdentity(oid)),
            lexicographicMode=False):
        if errorIndication:
            raise Exception(f"SNMP WALK error: {errorIndication}")
        elif errorStatus:
            raise Exception(f"SNMP WALK error: {errorStatus.prettyPrint()}")
        else:
            for varBind in varBinds:
                index = str(varBind[0]).split('.')[-1]
                results[index] = varBind[1]
    return results

def main():
    parser = argparse.ArgumentParser(description="Icinga2 check script for Aruba CX/6000 switches")
    parser.add_argument('--host', required=True, help='Hostname or IP address of the switch')
    parser.add_argument('--community', default='public', help='SNMP community string')
    parser.add_argument('--port', type=int, default=161, help='SNMP port')
    parser.add_argument('--warn-temp', type=float, default=50, help='Warning threshold for temperature (°C)')
    parser.add_argument('--crit-temp', type=float, default=70, help='Critical threshold for temperature (°C)')
    args = parser.parse_args()

    exit_status = 0
    messages = []

    try:
        uptime_ticks = snmp_get(args.host, args.community, SYS_UPTIME_OID, args.port)
        uptime = convert_ticks(uptime_ticks)
        messages.append(f"Uptime: {uptime}")
    except Exception as e:
        messages.append(f"Failed to get uptime: {e}")
        exit_status = 3

    try:
        temp_raw = snmp_get(args.host, args.community, TEMP_OID, args.port)
        temp = float(temp_raw) / 1000
        messages.append(f"Temperature: {temp:.2f}°C")
        if temp >= args.crit_temp:
            exit_status = max(exit_status, 2)
        elif temp >= args.warn_temp:
            exit_status = max(exit_status, 1)
    except Exception as e:
        messages.append(f"Failed to get temperature: {e}")
        exit_status = max(exit_status, 3)

    try:
        if_descr = snmp_walk(args.host, args.community, IF_DESCR_OID, args.port)
        if_status = snmp_walk(args.host, args.community, IF_OPER_STATUS_OID, args.port)
        if_in = snmp_walk(args.host, args.community, IF_IN_OCTETS_OID, args.port)
        if_out = snmp_walk(args.host, args.community, IF_OUT_OCTETS_OID, args.port)

        up_interfaces = 0
        for idx, descr in if_descr.items():
            status_val = if_status.get(idx, "N/A")
            status_str = "up" if str(status_val) == "1" else "down"
            if status_str == "up":
                up_interfaces += 1
            in_octets = convert_bytes(if_in.get(idx, 0))
            out_octets = convert_bytes(if_out.get(idx, 0))
            messages.append(f"IF{idx} ({descr}): {status_str}, In: {in_octets}, Out: {out_octets}")
        messages.insert(0, f"Interfaces up: {up_interfaces}/{len(if_descr)}")
    except Exception as e:
        messages.append(f"Failed to get interface details: {e}")
        exit_status = max(exit_status, 3)

    try:
        psu_entries = snmp_walk(args.host, args.community, PSU_STATUS_OID, args.port)
        for index, value in psu_entries.items():
            value = value.prettyPrint()
            if value.isdigit():
                status = "OK" if int(value) == 1 else f"FAIL (value: {value})"
                if int(value) != 1:
                    exit_status = max(exit_status, 2)
            else:
                status = value.upper()
            messages.append(f"PSU {index}: {status}")
    except Exception as e:
        messages.append(f"Failed to get PSU status: {e}")
        exit_status = max(exit_status, 3)

    try:
        fan_entries = snmp_walk(args.host, args.community, FAN_STATUS_OID, args.port)
        for index, value in fan_entries.items():
            value = value.prettyPrint()
            if value.isdigit():
                status = "OK" if int(value) == 1 else f"FAIL (value: {value})"
                if int(value) != 1:
                    exit_status = max(exit_status, 2)
            else:
                status = value.upper()
            messages.append(f"Fan {index}: {status}")
    except Exception as e:
        messages.append(f"Failed to get Fan status: {e}")
        exit_status = max(exit_status, 3)

    print("\n".join(messages))
    sys.exit(exit_status)

if __name__ == '__main__':
    main()